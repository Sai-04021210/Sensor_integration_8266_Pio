[
    {
        "id": "auth-tab",
        "type": "tab",
        "label": "Authentication & QR Scanner",
        "disabled": false,
        "info": "Weather Station Registration Platform with QR Code Scanning"
    },
    {
        "id": "api-tab", 
        "type": "tab",
        "label": "Weather Station APIs",
        "disabled": false,
        "info": "API endpoints for weather station management"
    },
    {
        "id": "login-endpoint",
        "type": "http in",
        "z": "auth-tab",
        "name": "Login Endpoint",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 80,
        "wires": [["validate-credentials"]]
    },
    {
        "id": "validate-credentials",
        "type": "function",
        "z": "auth-tab",
        "name": "Validate Credentials",
        "func": "// Simple credential validation (replace with your auth system)\nconst { email, username, password } = msg.payload;\n\n// Demo users - replace with database lookup\nconst validUsers = [\n    { email: \"admin@weather.com\", username: \"admin\", password: \"admin123\" },\n    { email: \"user@weather.com\", username: \"user\", password: \"user123\" }\n];\n\nconst user = validUsers.find(u => \n    (u.email === email || u.username === username) && u.password === password\n);\n\nif (user) {\n    // Generate session token (simple demo)\n    const sessionToken = Buffer.from(`${user.username}:${Date.now()}`).toString('base64');\n    \n    msg.payload = {\n        success: true,\n        message: \"Login successful\",\n        token: sessionToken,\n        user: { email: user.email, username: user.username }\n    };\n    msg.statusCode = 200;\n} else {\n    msg.payload = {\n        success: false,\n        message: \"Invalid credentials\"\n    };\n    msg.statusCode = 401;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 80,
        "wires": [["login-response"]]
    },
    {
        "id": "login-response",
        "type": "http response",
        "z": "auth-tab",
        "name": "Login Response",
        "statusCode": "",
        "headers": {"Content-Type": "application/json"},
        "x": 520,
        "y": 80,
        "wires": []
    },
    {
        "id": "dashboard-endpoint",
        "type": "http in",
        "z": "auth-tab",
        "name": "Dashboard Page",
        "url": "/dashboard",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [["serve-dashboard"]]
    },
    {
        "id": "serve-dashboard",
        "type": "template",
        "z": "auth-tab",
        "name": "Dashboard HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Weather Station Registration</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }\n        .container { max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; font-weight: bold; }\n        input, button { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }\n        button { background: #007bff; color: white; border: none; cursor: pointer; margin-top: 10px; }\n        button:hover { background: #0056b3; }\n        .hidden { display: none; }\n        #video { width: 100%; max-width: 400px; border: 2px solid #007bff; border-radius: 8px; }\n        .scanner-container { text-align: center; margin: 20px 0; }\n        .result { padding: 10px; margin: 10px 0; border-radius: 4px; }\n        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\n        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Weather Station Registration Platform</h1>\n        \n        <!-- Login Form -->\n        <div id=\"loginForm\">\n            <h2>Login</h2>\n            <div class=\"form-group\">\n                <label for=\"email\">Email or Username:</label>\n                <input type=\"text\" id=\"email\" placeholder=\"Enter email or username\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" id=\"password\" placeholder=\"Enter password\">\n            </div>\n            <button onclick=\"login()\">Login</button>\n            <div id=\"loginResult\"></div>\n        </div>\n        \n        <!-- QR Scanner Section -->\n        <div id=\"scannerSection\" class=\"hidden\">\n            <h2>Scan Weather Station QR Code</h2>\n            <div class=\"scanner-container\">\n                <video id=\"video\" autoplay></video>\n                <br>\n                <button onclick=\"startScanner()\">Start Camera</button>\n                <button onclick=\"stopScanner()\">Stop Camera</button>\n            </div>\n            <div id=\"scanResult\"></div>\n            <canvas id=\"canvas\" style=\"display: none;\"></canvas>\n        </div>\n        \n        <!-- Station Registration -->\n        <div id=\"registrationSection\" class=\"hidden\">\n            <h2>Register Weather Station</h2>\n            <div id=\"stationInfo\"></div>\n            <button onclick=\"registerStation()\">Add to Domain</button>\n            <div id=\"registrationResult\"></div>\n        </div>\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js\"></script>\n    <script>\n        let video, canvas, context, scanning = false, sessionToken = null, scannedData = null;\n        \n        async function login() {\n            const email = document.getElementById('email').value;\n            const password = document.getElementById('password').value;\n            \n            try {\n                const response = await fetch('/login', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ email, password })\n                });\n                \n                const result = await response.json();\n                const resultDiv = document.getElementById('loginResult');\n                \n                if (result.success) {\n                    sessionToken = result.token;\n                    resultDiv.innerHTML = '<div class=\"result success\">Login successful! Welcome ' + result.user.username + '</div>';\n                    document.getElementById('loginForm').classList.add('hidden');\n                    document.getElementById('scannerSection').classList.remove('hidden');\n                } else {\n                    resultDiv.innerHTML = '<div class=\"result error\">' + result.message + '</div>';\n                }\n            } catch (error) {\n                document.getElementById('loginResult').innerHTML = '<div class=\"result error\">Login failed: ' + error.message + '</div>';\n            }\n        }\n        \n        async function startScanner() {\n            video = document.getElementById('video');\n            canvas = document.getElementById('canvas');\n            context = canvas.getContext('2d');\n            \n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ \n                    video: { facingMode: 'environment' } \n                });\n                video.srcObject = stream;\n                scanning = true;\n                scanQRCode();\n            } catch (error) {\n                document.getElementById('scanResult').innerHTML = '<div class=\"result error\">Camera access denied: ' + error.message + '</div>';\n            }\n        }\n        \n        function stopScanner() {\n            scanning = false;\n            if (video && video.srcObject) {\n                video.srcObject.getTracks().forEach(track => track.stop());\n            }\n        }\n        \n        function scanQRCode() {\n            if (!scanning) return;\n            \n            if (video.readyState === video.HAVE_ENOUGH_DATA) {\n                canvas.height = video.videoHeight;\n                canvas.width = video.videoWidth;\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n                \n                const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n                const code = jsQR(imageData.data, imageData.width, imageData.height);\n                \n                if (code) {\n                    scannedData = code.data;\n                    document.getElementById('scanResult').innerHTML = \n                        '<div class=\"result success\">QR Code detected: ' + code.data + '</div>';\n                    \n                    // Parse weather station info from QR code\n                    parseStationInfo(code.data);\n                    stopScanner();\n                    return;\n                }\n            }\n            \n            requestAnimationFrame(scanQRCode);\n        }\n        \n        function parseStationInfo(qrData) {\n            // Assume QR code contains JSON with station info\n            try {\n                const stationData = JSON.parse(qrData);\n                document.getElementById('stationInfo').innerHTML = `\n                    <p><strong>Station ID:</strong> ${stationData.id || 'Unknown'}</p>\n                    <p><strong>Model:</strong> ${stationData.model || 'Unknown'}</p>\n                    <p><strong>Location:</strong> ${stationData.location || 'Unknown'}</p>\n                    <p><strong>Setup URL:</strong> <a href=\"${stationData.setupUrl}\" target=\"_blank\">${stationData.setupUrl}</a></p>\n                `;\n                document.getElementById('registrationSection').classList.remove('hidden');\n            } catch (error) {\n                // If not JSON, treat as simple URL or ID\n                document.getElementById('stationInfo').innerHTML = `\n                    <p><strong>Scanned Data:</strong> ${qrData}</p>\n                    <p>This appears to be a weather station identifier or setup URL.</p>\n                `;\n                document.getElementById('registrationSection').classList.remove('hidden');\n            }\n        }\n        \n        async function registerStation() {\n            if (!scannedData || !sessionToken) {\n                document.getElementById('registrationResult').innerHTML = \n                    '<div class=\"result error\">Missing scan data or session token</div>';\n                return;\n            }\n            \n            try {\n                const response = await fetch('/api/register-station', {\n                    method: 'POST',\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + sessionToken\n                    },\n                    body: JSON.stringify({ \n                        qrData: scannedData,\n                        timestamp: new Date().toISOString()\n                    })\n                });\n                \n                const result = await response.json();\n                const resultDiv = document.getElementById('registrationResult');\n                \n                if (result.success) {\n                    resultDiv.innerHTML = '<div class=\"result success\">' + result.message + '</div>';\n                } else {\n                    resultDiv.innerHTML = '<div class=\"result error\">' + result.message + '</div>';\n                }\n            } catch (error) {\n                document.getElementById('registrationResult').innerHTML = \n                    '<div class=\"result error\">Registration failed: ' + error.message + '</div>';\n            }\n        }\n        \n        // Demo credentials info\n        document.addEventListener('DOMContentLoaded', function() {\n            document.getElementById('loginResult').innerHTML = \n                '<div style=\"background: #e7f3ff; padding: 10px; margin: 10px 0; border-radius: 4px; font-size: 12px;\">' +\n                '<strong>Demo Credentials:</strong><br>' +\n                'Email: admin@weather.com, Password: admin123<br>' +\n                'Email: user@weather.com, Password: user123' +\n                '</div>';\n        });\n    </script>\n</body>\n</html>",
        "output": "str",
        "x": 320,
        "y": 160,
        "wires": [["dashboard-response"]]
    },
    {
        "id": "dashboard-response",
        "type": "http response",
        "z": "auth-tab",
        "name": "Dashboard Response",
        "statusCode": "",
        "headers": {"Content-Type": "text/html"},
        "x": 520,
        "y": 160,
        "wires": []
    },
    {
        "id": "register-station-endpoint",
        "type": "http in",
        "z": "api-tab",
        "name": "Register Station API",
        "url": "/api/register-station",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 80,
        "wires": [["validate-token"]]
    },
    {
        "id": "validate-token",
        "type": "function",
        "z": "api-tab",
        "name": "Validate Token",
        "func": "// Simple token validation\nconst authHeader = msg.req.headers.authorization;\n\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n    msg.payload = { success: false, message: \"Missing or invalid authorization header\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst token = authHeader.substring(7);\ntry {\n    // Decode the simple token (in production, use proper JWT validation)\n    const decoded = Buffer.from(token, 'base64').toString('utf8');\n    const [username, timestamp] = decoded.split(':');\n    \n    // Check if token is not too old (1 hour)\n    const tokenAge = Date.now() - parseInt(timestamp);\n    if (tokenAge > 3600000) {\n        msg.payload = { success: false, message: \"Token expired\" };\n        msg.statusCode = 401;\n        return msg;\n    }\n    \n    // Add user info to message\n    msg.user = { username };\n    return msg;\n} catch (error) {\n    msg.payload = { success: false, message: \"Invalid token\" };\n    msg.statusCode = 401;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 80,
        "wires": [["process-registration"]]
    },
    {
        "id": "process-registration",
        "type": "function",
        "z": "api-tab",
        "name": "Process Registration",
        "func": "// Process weather station registration\nconst { qrData, timestamp } = msg.payload;\nconst username = msg.user.username;\n\n// Generate unique station ID\nconst stationId = `WS_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Parse QR data\nlet stationInfo;\ntry {\n    stationInfo = JSON.parse(qrData);\n} catch (error) {\n    // If not JSON, treat as URL or simple ID\n    stationInfo = {\n        id: qrData,\n        setupUrl: qrData.startsWith('http') ? qrData : null,\n        scannedAt: timestamp\n    };\n}\n\n// Create registration record\nconst registration = {\n    stationId,\n    originalData: qrData,\n    stationInfo,\n    registeredBy: username,\n    registeredAt: new Date().toISOString(),\n    status: 'pending',\n    domain: 'weather-platform.local' // Your domain\n};\n\n// Store in context (in production, save to database)\nlet stations = context.get('registeredStations') || [];\nstations.push(registration);\ncontext.set('registeredStations', stations);\n\n// Prepare response\nmsg.payload = {\n    success: true,\n    message: `Weather station registered successfully with ID: ${stationId}`,\n    stationId,\n    registration\n};\nmsg.statusCode = 200;\n\n// Also send to MQTT for integration with your IoT platform\nmsg.topic = `weather-stations/${stationId}/registered`;\nmsg.mqtt_payload = registration;\n\nreturn [msg, { topic: msg.topic, payload: msg.mqtt_payload }];",
        "outputs": 2,
        "noerr": 0,
        "x": 540,
        "y": 80,
        "wires": [["registration-response"], ["mqtt-publish"]]
    },
    {
        "id": "registration-response",
        "type": "http response",
        "z": "api-tab",
        "name": "Registration Response",
        "statusCode": "",
        "headers": {"Content-Type": "application/json"},
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "mqtt-publish",
        "type": "mqtt out",
        "z": "api-tab",
        "name": "Publish to MQTT",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt-broker",
        "x": 760,
        "y": 100,
        "wires": []
    },
    {
        "id": "mqtt-broker",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "list-stations-endpoint",
        "type": "http in",
        "z": "api-tab",
        "name": "List Stations API",
        "url": "/api/stations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [["get-stations"]]
    },
    {
        "id": "get-stations",
        "type": "function",
        "z": "api-tab",
        "name": "Get Stations",
        "func": "// Get all registered stations\nconst stations = context.get('registeredStations') || [];\n\nmsg.payload = {\n    success: true,\n    count: stations.length,\n    stations: stations\n};\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 180,
        "wires": [["stations-response"]]
    },
    {
        "id": "stations-response",
        "type": "http response",
        "z": "api-tab",
        "name": "Stations Response",
        "statusCode": "",
        "headers": {"Content-Type": "application/json"},
        "x": 520,
        "y": 180,
        "wires": []
    }
]
